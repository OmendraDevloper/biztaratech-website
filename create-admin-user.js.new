// Usage: node create-admin-user.js [mongodb_uri] [username] [email] [password] [name] [mobile]
const { MongoClient } = require('mongodb');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Use the environment variable or pass it as an argument when running the script
const uri = process.env.MONGODB_URI || process.argv[2]; 
const dbName = process.env.MONGODB_DB || 'Biztara';

if (!uri) {
  console.error('MongoDB URI not provided. Please set MONGODB_URI environment variable or provide it as an argument.');
  process.exit(1);
}

// Display some connection info for troubleshooting
console.log(`Connecting to MongoDB database: ${dbName}`);
// Extract host from URI without showing credentials
try {
  const maskedUri = uri.replace(/\/\/.*@/, '//****:****@');
  console.log(`Using connection string: ${maskedUri}`);
} catch (error) {
  console.log('Could not parse connection string for display');
}

async function main() {
  // Get values from command line arguments or use defaults
  const username = process.argv[3] || 'admin';
  const email = process.argv[4] || 'admin@example.com';
  const password = process.argv[5] || 'AdminPassword123!'; 
  const name = process.argv[6] || 'Admin User';
  const mobile = process.argv[7] || '1234567890';
  const role = 'admin';
  
  console.log(`Creating admin user with email: ${email}`);
  
  // Hash the password
  console.log('Hashing password...');
  const hashedPassword = await bcrypt.hash(password, 10);
  
  // Connect to MongoDB
  console.log('Connecting to MongoDB...');
  let client;
  try {
    client = await MongoClient.connect(uri, { 
      connectTimeoutMS: 5000,
      socketTimeoutMS: 30000
    });
    console.log('Successfully connected to MongoDB');
  } catch (error) {
    console.error('Failed to connect to MongoDB');
    throw error;
  }

  const db = client.db(dbName);
  const users = db.collection('users');

  console.log('Checking if user already exists...');
  const existing = await users.findOne({ $or: [ { email }, { username } ] });
  if (existing) {
    console.log('User with this email or username already exists.');
    await client.close();
    return;
  }

  console.log('Creating user...');
  await users.insertOne({
    name,
    email,
    username,
    password: hashedPassword,
    role,
    mobile,
    createdAt: new Date()
  });
  console.log('Admin user created successfully!');
  console.log(`Username: ${username}`);
  console.log(`Email: ${email}`);
  console.log('You can now log in with these credentials at your website.');
  await client.close();
}

console.log('Attempting to connect to MongoDB...');
main()
  .then(() => console.log('Script completed successfully.'))
  .catch(error => {
    console.error('Error creating admin user:');
    console.error(error);
    
    // Provide more detailed guidance based on common errors
    if (error.name === 'MongoNetworkError') {
      console.log('\nTROUBLESHOOTING:');
      console.log('- Check if the MongoDB URI is correct');
      console.log('- Ensure that your IP address is whitelisted in MongoDB Atlas');
      console.log('- Verify that your MongoDB instance is running and accessible');
    } else if (error.message && error.message.includes('Authentication failed')) {
      console.log('\nTROUBLESHOOTING:');
      console.log('- Check if the username and password in your MongoDB URI are correct');
      console.log('- Verify that the user has appropriate permissions');
    } else {
      console.log('\nTROUBLESHOOTING:');
      console.log('- Check your MongoDB URI format');
      console.log('- Ensure the database name is correct');
    }
  });
